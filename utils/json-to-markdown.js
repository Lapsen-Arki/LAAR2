const fs = require("fs");
const path = require("path");

const args = process.argv.slice(2);

const title = args[0] || "Backend Coverage Summary";
const filename =
  path.join("./results", args[1] + ".md") || "results/backend-summary.md";
const jsonPath =
  path.join("./results", args[1] + ".json") || "results/backend-summary.json";
const testResults =
  path.join("..", args[2], "coverage", "result.json") ||
  "../backend/coverage/result.json";

fs.readFile(jsonPath, "utf8", function (err, data) {
  if (err) throw err;

  let jsonData = JSON.parse(data);
  let header =
    "St | Directory | Statements% | StCount | Branches% | BrCount | Functions% | FnCount | Lines% | LnCount";
  let separator = Object.keys(jsonData[0])
    .map(() => "---")
    .join(" | ");
  let rows = jsonData.map((obj) => Object.values(obj).join(" | ")).join("\n");

  let table = `| ${header} |\n| ${separator} |\n| ${rows} |`;
  let markdownContent = `# ${title}\n\n${table}\n\n`;
  let timestamp = new Date().toLocaleString();

  let resultsData = JSON.parse(fs.readFileSync(testResults, "utf8"));
  if (resultsData.numTestsFailed > 0) {
    // Second table creation
    let secondTableHeader;
    if (args[2] === "frontend") {
      secondTableHeader = "Suite Name | Test Case Name | Message";
    } else {
      secondTableHeader = "Suite Name | Test Case Name | Actual | Expected";
    }
    let secondTableSeparator;
    if (args[2] === "frontend") {
      secondTableSeparator = Object.keys(resultsData.failedTestNames[0])
        .map(() => "---")
        .join(" | ");
    } else {
      secondTableSeparator =
        Object.keys(resultsData.failedTestNames[0])
          .map(() => "---")
          .join(" | ") +
        " | " +
        "---";
    }
    let secondTableRows;
    if (args[2] === "frontend") {
      secondTableRows = resultsData.failedTestNames
        .map(
          (failedTest) =>
            `| ${failedTest.suiteName} | ${failedTest.testCaseName} | ${failedTest.message} |`
        )
        .join("\n");
    } else {
      secondTableRows = resultsData.failedTestNames
        .map(
          (failedTest) =>
            `| ${failedTest.suiteName} | ${
              failedTest.testCaseName
            } | ${failedTest.matcherResult.actual.join(
              ", "
            )} | ${failedTest.matcherResult.expected.join(", ")} |`
        )
        .join("\n");
    }

    let secondTable = `| ${secondTableHeader} |\n| ${secondTableSeparator} |\n${secondTableRows}`;
    markdownContent += `\n\n# Failed Tests\n\n${secondTable}\n\n`;
  }
  if (resultsData.numTestsFailed === 0) {
    markdownContent += `Ran ${resultsData.numSuites} suites with ${resultsData.numTestsSucceeded} tests passing with no failures.\n`;
  } else {
    markdownContent += `Ran ${resultsData.numSuites} suites with ${resultsData.numTestsSucceeded} tests passing and ${resultsData.numTestsFailed} tests failing.\n`;
  }
  markdownContent += `Generated by utils at ${timestamp}`;
  fs.writeFile(filename, markdownContent, "utf8", function (err) {
    if (err) throw err;
  });
});
